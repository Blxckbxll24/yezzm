{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emmag\\\\Desktop\\\\nuevoyeezy\\\\spotifybarato\\\\src\\\\components\\\\reproductor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport SpotifyPlayer from 'react-spotify-web-playback';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CLIENT_ID = \"453d6c17658a4a4a8498f17cb1b22b75\";\nconst CLIENT_SECRET = \"6d243006672b46cea52da45f4fa7b0f7\";\nconst Player = () => {\n  _s();\n  const [token, setToken] = useState('');\n  const [trackUri, setTrackUri] = useState(''); // URI de la canción que se reproducirá\n\n  // Obtener token de acceso de Spotify\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://accounts.spotify.com/api/token', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          },\n          body: `grant_type=client_credentials&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`\n        });\n        if (!response.ok) {\n          throw new Error(`Error al obtener el token de acceso. Código: ${response.status}`);\n        }\n        const data = await response.json();\n        if (!data.access_token) {\n          throw new Error('Token de acceso no válido');\n        }\n        setToken(data.access_token);\n      } catch (error) {\n        console.error('Error fetching Spotify access token:', error.message);\n      }\n    };\n    fetchData();\n  }, []);\n  const handlePlay = () => {\n    // Lógica para comenzar la reproducción\n  };\n  const handlePause = () => {\n    // Lógica para pausar la reproducción\n  };\n  const handleTrackChange = uri => {\n    // Lógica para cambiar la canción actual\n    setTrackUri(uri);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Nombre de la canci\\xF3n - Artista\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n      token: token,\n      uris: trackUri ? [trackUri] : [] // Puedes proporcionar un array de URIs de canciones para reproducir\n      ,\n      callback: state => {\n        if (!state.isPlaying) {\n          // Lógica para manejar la pausa de la canción\n        }\n      },\n      play: handlePlay,\n      pause: handlePause,\n      showSaveIcon: true,\n      callback: state => {\n        if (!state.isPlaying) {\n          // Lógica para manejar la pausa de la canción\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(Player, \"TdzQlN/yAjeECn/9X5Bi9yeQunA=\");\n_c = Player;\nexport default Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","useState","useEffect","axios","SpotifyPlayer","jsxDEV","_jsxDEV","CLIENT_ID","CLIENT_SECRET","Player","_s","token","setToken","trackUri","setTrackUri","fetchData","response","fetch","method","headers","body","ok","Error","status","data","json","access_token","error","console","message","handlePlay","handlePause","handleTrackChange","uri","children","fileName","_jsxFileName","lineNumber","columnNumber","uris","callback","state","isPlaying","play","pause","showSaveIcon","_c","$RefreshReg$"],"sources":["C:/Users/emmag/Desktop/nuevoyeezy/spotifybarato/src/components/reproductor.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport SpotifyPlayer from 'react-spotify-web-playback';\r\n\r\n\r\nconst CLIENT_ID = \"453d6c17658a4a4a8498f17cb1b22b75\";\r\nconst CLIENT_SECRET = \"6d243006672b46cea52da45f4fa7b0f7\";\r\nconst Player = () => {\r\n  const [token, setToken] = useState('');\r\n  const [trackUri, setTrackUri] = useState(''); // URI de la canción que se reproducirá\r\n\r\n  // Obtener token de acceso de Spotify\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('https://accounts.spotify.com/api/token', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: `grant_type=client_credentials&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`,\r\n        });\r\n  \r\n        if (!response.ok) {\r\n          throw new Error(`Error al obtener el token de acceso. Código: ${response.status}`);\r\n        }\r\n  \r\n        const data = await response.json();\r\n  \r\n        if (!data.access_token) {\r\n          throw new Error('Token de acceso no válido');\r\n        }\r\n  \r\n        setToken(data.access_token);\r\n      } catch (error) {\r\n        console.error('Error fetching Spotify access token:', error.message);\r\n      }\r\n    };\r\n  \r\n    fetchData();\r\n  }, []);\r\n\r\n\r\n\r\n  const handlePlay = () => {\r\n    // Lógica para comenzar la reproducción\r\n  };\r\n\r\n  const handlePause = () => {\r\n    // Lógica para pausar la reproducción\r\n  };\r\n\r\n  const handleTrackChange = (uri) => {\r\n    // Lógica para cambiar la canción actual\r\n    setTrackUri(uri);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* Puedes agregar información sobre la canción actual, como título, artista, etc. */}\r\n      <h3>Nombre de la canción - Artista</h3>\r\n\r\n      {/* Componente de reproductor de Spotify */}\r\n      <SpotifyPlayer\r\n        token={token}\r\n        uris={trackUri ? [trackUri] : []} // Puedes proporcionar un array de URIs de canciones para reproducir\r\n        callback={(state) => {\r\n          if (!state.isPlaying) {\r\n            // Lógica para manejar la pausa de la canción\r\n          }\r\n        }}\r\n        play={handlePlay}\r\n        pause={handlePause}\r\n        showSaveIcon\r\n        callback={(state) => {\r\n          if (!state.isPlaying) {\r\n            // Lógica para manejar la pausa de la canción\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGvD,MAAMC,SAAS,GAAG,kCAAkC;AACpD,MAAMC,aAAa,GAAG,kCAAkC;AACxD,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMa,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;UACrEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAG,2CAA0Cb,SAAU,kBAAiBC,aAAc;QAC5F,CAAC,CAAC;QAEF,IAAI,CAACQ,QAAQ,CAACK,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAE,gDAA+CN,QAAQ,CAACO,MAAO,EAAC,CAAC;QACpF;QAEA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QAElC,IAAI,CAACD,IAAI,CAACE,YAAY,EAAE;UACtB,MAAM,IAAIJ,KAAK,CAAC,2BAA2B,CAAC;QAC9C;QAEAV,QAAQ,CAACY,IAAI,CAACE,YAAY,CAAC;MAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAACE,OAAO,CAAC;MACtE;IACF,CAAC;IAEDd,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAIN,MAAMe,UAAU,GAAGA,CAAA,KAAM;IACvB;EAAA,CACD;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB;EAAA,CACD;EAED,MAAMC,iBAAiB,GAAIC,GAAG,IAAK;IACjC;IACAnB,WAAW,CAACmB,GAAG,CAAC;EAClB,CAAC;EAED,oBACE3B,OAAA;IAAA4B,QAAA,gBAEE5B,OAAA;MAAA4B,QAAA,EAAI;IAA8B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGvChC,OAAA,CAACF,aAAa;MACZO,KAAK,EAAEA,KAAM;MACb4B,IAAI,EAAE1B,QAAQ,GAAG,CAACA,QAAQ,CAAC,GAAG,EAAG,CAAC;MAAA;MAClC2B,QAAQ,EAAGC,KAAK,IAAK;QACnB,IAAI,CAACA,KAAK,CAACC,SAAS,EAAE;UACpB;QAAA;MAEJ,CAAE;MACFC,IAAI,EAAEb,UAAW;MACjBc,KAAK,EAAEb,WAAY;MACnBc,YAAY;MACZL,QAAQ,EAAGC,KAAK,IAAK;QACnB,IAAI,CAACA,KAAK,CAACC,SAAS,EAAE;UACpB;QAAA;MAEJ;IAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC5B,EAAA,CA3EID,MAAM;AAAAqC,EAAA,GAANrC,MAAM;AA6EZ,eAAeA,MAAM;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
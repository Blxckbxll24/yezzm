{"ast":null,"code":"import chroma from './chroma';\nimport compare from './compare';\nimport darken from './darken';\nimport desaturate from './desaturate';\nimport fade from './fade';\nimport formatCSS from './format-css';\nimport lighten from './lighten';\nimport luminance from './luminance';\nimport parseColor from './modules/parse-color';\nimport { invariant } from './modules/utils';\nimport rotate from './rotate';\nimport saturate from './saturate';\nimport textColor from './text-color';\nclass Colorizr {\n  hex;\n  model;\n  hsl;\n  rgb;\n  constructor(color, options = {}) {\n    invariant(!!color, 'color is required');\n    const {\n      model = 'rgb'\n    } = options;\n    const {\n      hex,\n      hsl,\n      rgb\n    } = parseColor(color);\n    this.model = model;\n    this.hex = hex;\n    this.hsl = hsl;\n    this.rgb = rgb;\n  }\n  /**\r\n   * Get css string\r\n   */\n  get css() {\n    return formatCSS(this.hsl, {\n      model: this.model\n    });\n  }\n  /**\r\n   * Get the red value\r\n   */\n  get red() {\n    return Number(this.rgb.r);\n  }\n  /**\r\n   * Get the green value\r\n   */\n  get green() {\n    return Number(this.rgb.g);\n  }\n  /**\r\n   * Get the blue value\r\n   */\n  get blue() {\n    return Number(this.rgb.b);\n  }\n  /**\r\n   * Get the hue value\r\n   */\n  get hue() {\n    return Number(this.hsl.h);\n  }\n  /**\r\n   * Get the saturation value\r\n   */\n  get saturation() {\n    return Number(this.hsl.s);\n  }\n  /**\r\n   * Get the lightness value\r\n   */\n  get lightness() {\n    return Number(this.hsl.l);\n  }\n  /**\r\n   * Get the luminance value\r\n   */\n  get luminance() {\n    return luminance(this.hex);\n  }\n  /**\r\n   * Get the chroma value\r\n   */\n  get chroma() {\n    return chroma(this.hex);\n  }\n  /**\r\n   * Get the contrasted color\r\n   */\n  get textColor() {\n    return textColor(this.hex);\n  }\n  /**\r\n   * Test 2 colors for compliance\r\n   */\n  compare(input) {\n    return compare(this.hex, input);\n  }\n  /**\r\n   * Increase lightness\r\n   */\n  lighten(percentage = 10) {\n    return lighten(this.hex, percentage);\n  }\n  /**\r\n   * Decrease lightness\r\n   */\n  darken(percentage = 10) {\n    return darken(this.hex, percentage);\n  }\n  /**\r\n   * Increase saturation\r\n   */\n  saturate(percentage = 10) {\n    return saturate(this.hex, percentage);\n  }\n  /**\r\n   * Decrease saturation\r\n   */\n  desaturate(percentage = 10) {\n    return desaturate(this.hex, percentage);\n  }\n  /**\r\n   * Invert color\r\n   */\n  invert() {\n    return rotate(this.hex, 180);\n  }\n  /**\r\n   * Rotate color\r\n   */\n  rotate(degrees = 15) {\n    return rotate(this.hex, degrees);\n  }\n  /**\r\n   * Fade color\r\n   */\n  fade(percentage = 10) {\n    return fade(this.hex, percentage, this.model);\n  }\n}\nexport { default as brightnessDifference } from './brightness-difference';\nexport { default as chroma } from './chroma';\nexport { default as colorDifference } from './color-difference';\nexport { default as compare } from './compare';\nexport { default as contrast } from './contrast';\nexport { default as darken } from './darken';\nexport { default as desaturate } from './desaturate';\nexport { default as fade } from './fade';\nexport { default as formatCSS } from './format-css';\nexport { default as formatHex } from './format-hex';\nexport { default as hex2hsl } from './hex2hsl';\nexport { default as hex2rgb } from './hex2rgb';\nexport { default as hsl2hex } from './hsl2hex';\nexport { default as hsl2rgb } from './hsl2rgb';\nexport { default as isValidColor } from './is-valid-color';\nexport { default as isValidHex } from './is-valid-hex';\nexport { default as lighten } from './lighten';\nexport { default as luminance } from './luminance';\nexport { default as name } from './name';\nexport { default as palette } from './palette';\nexport { default as parseCSS } from './parse-css';\nexport { default as random } from './random';\nexport { default as rgb2hex } from './rgb2hex';\nexport { default as rgb2hsl } from './rgb2hsl';\nexport { default as rotate } from './rotate';\nexport { default as saturate } from './saturate';\nexport { default as scheme } from './scheme';\nexport { default as textColor } from './text-color';\nexport * from './types';\nexport default Colorizr;","map":{"version":3,"names":["chroma","compare","darken","desaturate","fade","formatCSS","lighten","luminance","parseColor","invariant","rotate","saturate","textColor","Colorizr","hex","model","hsl","rgb","constructor","color","options","css","red","Number","r","green","g","blue","b","hue","h","saturation","s","lightness","l","input","percentage","invert","degrees","default","brightnessDifference","colorDifference","contrast","formatHex","hex2hsl","hex2rgb","hsl2hex","hsl2rgb","isValidColor","isValidHex","name","palette","parseCSS","random","rgb2hex","rgb2hsl","scheme"],"sources":["C:\\Users\\adela\\Desktop\\nuevoyeezy\\spotifybarato\\node_modules\\colorizr\\src\\index.ts"],"sourcesContent":["import chroma from './chroma';\r\nimport compare from './compare';\r\nimport darken from './darken';\r\nimport desaturate from './desaturate';\r\nimport fade from './fade';\r\nimport formatCSS from './format-css';\r\nimport lighten from './lighten';\r\nimport luminance from './luminance';\r\nimport parseColor from './modules/parse-color';\r\nimport { invariant } from './modules/utils';\r\nimport rotate from './rotate';\r\nimport saturate from './saturate';\r\nimport textColor from './text-color';\r\nimport { Analysis, HSL, Options, RGB, RGBArray } from './types';\r\n\r\nclass Colorizr {\r\n  public hex: string;\r\n  private readonly model: Options['model'];\r\n  public hsl: HSL;\r\n  public rgb: RGB;\r\n\r\n  constructor(color: string | HSL | RGB | RGBArray, options: Options = {}) {\r\n    invariant(!!color, 'color is required');\r\n\r\n    const { model = 'rgb' } = options;\r\n    const { hex, hsl, rgb } = parseColor(color);\r\n\r\n    this.model = model;\r\n    this.hex = hex;\r\n    this.hsl = hsl;\r\n    this.rgb = rgb;\r\n  }\r\n\r\n  /**\r\n   * Get css string\r\n   */\r\n  get css(): string {\r\n    return formatCSS(this.hsl, { model: this.model });\r\n  }\r\n\r\n  /**\r\n   * Get the red value\r\n   */\r\n  get red(): number {\r\n    return Number(this.rgb.r);\r\n  }\r\n\r\n  /**\r\n   * Get the green value\r\n   */\r\n  get green(): number {\r\n    return Number(this.rgb.g);\r\n  }\r\n\r\n  /**\r\n   * Get the blue value\r\n   */\r\n  get blue(): number {\r\n    return Number(this.rgb.b);\r\n  }\r\n\r\n  /**\r\n   * Get the hue value\r\n   */\r\n  get hue(): number {\r\n    return Number(this.hsl.h);\r\n  }\r\n\r\n  /**\r\n   * Get the saturation value\r\n   */\r\n  get saturation(): number {\r\n    return Number(this.hsl.s);\r\n  }\r\n\r\n  /**\r\n   * Get the lightness value\r\n   */\r\n  get lightness(): number {\r\n    return Number(this.hsl.l);\r\n  }\r\n\r\n  /**\r\n   * Get the luminance value\r\n   */\r\n  get luminance(): number {\r\n    return luminance(this.hex);\r\n  }\r\n\r\n  /**\r\n   * Get the chroma value\r\n   */\r\n  get chroma(): number {\r\n    return chroma(this.hex);\r\n  }\r\n\r\n  /**\r\n   * Get the contrasted color\r\n   */\r\n  get textColor(): string {\r\n    return textColor(this.hex);\r\n  }\r\n\r\n  /**\r\n   * Test 2 colors for compliance\r\n   */\r\n  public compare(input: string): Analysis {\r\n    return compare(this.hex, input);\r\n  }\r\n\r\n  /**\r\n   * Increase lightness\r\n   */\r\n  public lighten(percentage = 10): string {\r\n    return lighten(this.hex, percentage);\r\n  }\r\n\r\n  /**\r\n   * Decrease lightness\r\n   */\r\n  public darken(percentage = 10): string {\r\n    return darken(this.hex, percentage);\r\n  }\r\n\r\n  /**\r\n   * Increase saturation\r\n   */\r\n  public saturate(percentage = 10): string {\r\n    return saturate(this.hex, percentage);\r\n  }\r\n\r\n  /**\r\n   * Decrease saturation\r\n   */\r\n  public desaturate(percentage = 10): string {\r\n    return desaturate(this.hex, percentage);\r\n  }\r\n\r\n  /**\r\n   * Invert color\r\n   */\r\n  public invert(): string {\r\n    return rotate(this.hex, 180);\r\n  }\r\n\r\n  /**\r\n   * Rotate color\r\n   */\r\n  public rotate(degrees = 15): string {\r\n    return rotate(this.hex, degrees);\r\n  }\r\n\r\n  /**\r\n   * Fade color\r\n   */\r\n  public fade(percentage = 10): string {\r\n    return fade(this.hex, percentage, this.model);\r\n  }\r\n}\r\n\r\nexport { default as brightnessDifference } from './brightness-difference';\r\nexport { default as chroma } from './chroma';\r\nexport { default as colorDifference } from './color-difference';\r\nexport { default as compare } from './compare';\r\nexport { default as contrast } from './contrast';\r\nexport { default as darken } from './darken';\r\nexport { default as desaturate } from './desaturate';\r\nexport { default as fade } from './fade';\r\nexport { default as formatCSS } from './format-css';\r\nexport { default as formatHex } from './format-hex';\r\nexport { default as hex2hsl } from './hex2hsl';\r\nexport { default as hex2rgb } from './hex2rgb';\r\nexport { default as hsl2hex } from './hsl2hex';\r\nexport { default as hsl2rgb } from './hsl2rgb';\r\nexport { default as isValidColor } from './is-valid-color';\r\nexport { default as isValidHex } from './is-valid-hex';\r\nexport { default as lighten } from './lighten';\r\nexport { default as luminance } from './luminance';\r\nexport { default as name } from './name';\r\nexport { default as palette } from './palette';\r\nexport { default as parseCSS } from './parse-css';\r\nexport { default as random } from './random';\r\nexport { default as rgb2hex } from './rgb2hex';\r\nexport { default as rgb2hsl } from './rgb2hsl';\r\nexport { default as rotate } from './rotate';\r\nexport { default as saturate } from './saturate';\r\nexport { default as scheme } from './scheme';\r\nexport { default as textColor } from './text-color';\r\n\r\nexport * from './types';\r\n\r\nexport default Colorizr;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
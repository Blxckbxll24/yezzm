{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emmag\\\\Desktop\\\\cosas\\\\spotify_JNCR\\\\spotifybarato\\\\src\\\\pages\\\\reproductor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport SpotifyPlayer from 'react-spotify-web-playback';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CLIENT_ID = \"453d6c17658a4a4a8498f17cb1b22b75\";\nconst CLIENT_SECRET = \"6d243006672b46cea52da45f4fa7b0f7\";\nconst Player = () => {\n  _s();\n  const [token, setToken] = useState(''); // Estado para almacenar el token de acceso\n  const [trackUri, setTrackUri] = useState(''); // Estado para almacenar el URI de la canción que se va a reproducir\n\n  useEffect(() => {\n    var authParameters = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: 'grant_type=client_credentials&client_id=' + CLIENT_ID + '&client_secret=' + CLIENT_SECRET\n    };\n    fetch('https://accounts.spotify.com/api/token', authParameters).then(result => result.json()).then(data => setToken(data.access_token));\n  }, []);\n  const handlePlay = ({\n    spotify_uri\n  }) => {\n    setTrackUri(spotify_uri); // Actualizar el estado del URI de la canción que se va a reproducir\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handlePlay({\n        spotify_uri: 'spotify:track:TU_ID_DE_CANCION'\n      }),\n      children: \"Reproducir canci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), token && /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n      token: token,\n      uris: trackUri ? [trackUri] : []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(Player, \"TdzQlN/yAjeECn/9X5Bi9yeQunA=\");\n_c = Player;\nexport default Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","useEffect","useState","SpotifyPlayer","jsxDEV","_jsxDEV","CLIENT_ID","CLIENT_SECRET","Player","_s","token","setToken","trackUri","setTrackUri","authParameters","method","headers","body","fetch","then","result","json","data","access_token","handlePlay","spotify_uri","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","uris","_c","$RefreshReg$"],"sources":["C:/Users/emmag/Desktop/cosas/spotify_JNCR/spotifybarato/src/pages/reproductor.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport SpotifyPlayer from 'react-spotify-web-playback';\r\n\r\nconst CLIENT_ID = \"453d6c17658a4a4a8498f17cb1b22b75\";\r\nconst CLIENT_SECRET = \"6d243006672b46cea52da45f4fa7b0f7\";\r\n\r\nconst Player = () => {\r\n  const [token, setToken] = useState(''); // Estado para almacenar el token de acceso\r\n  const [trackUri, setTrackUri] = useState(''); // Estado para almacenar el URI de la canción que se va a reproducir\r\n\r\n  useEffect(() => {\r\n    var authParameters = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n        },\r\n        body: 'grant_type=client_credentials&client_id=' + CLIENT_ID + '&client_secret=' + CLIENT_SECRET\r\n    };\r\n    fetch('https://accounts.spotify.com/api/token', authParameters)\r\n        .then(result => result.json())\r\n        .then(data => setToken(data.access_token));\r\n}, []);\r\n\r\n  const handlePlay = ({ spotify_uri }) => {\r\n    setTrackUri(spotify_uri); // Actualizar el estado del URI de la canción que se va a reproducir\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => handlePlay({ spotify_uri: 'spotify:track:TU_ID_DE_CANCION' })}>Reproducir canción</button>\r\n      {token && <SpotifyPlayer token={token} uris={trackUri ? [trackUri] : []} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,SAAS,GAAG,kCAAkC;AACpD,MAAMC,aAAa,GAAG,kCAAkC;AAExD,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE9CD,SAAS,CAAC,MAAM;IACd,IAAIa,cAAc,GAAG;MACjBC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAE,0CAA0C,GAAGX,SAAS,GAAG,iBAAiB,GAAGC;IACvF,CAAC;IACDW,KAAK,CAAC,wCAAwC,EAAEJ,cAAc,CAAC,CAC1DK,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC,CAC7BF,IAAI,CAACG,IAAI,IAAIX,QAAQ,CAACW,IAAI,CAACC,YAAY,CAAC,CAAC;EAClD,CAAC,EAAE,EAAE,CAAC;EAEJ,MAAMC,UAAU,GAAGA,CAAC;IAAEC;EAAY,CAAC,KAAK;IACtCZ,WAAW,CAACY,WAAW,CAAC,CAAC,CAAC;EAC5B,CAAC;;EAED,oBACEpB,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAQsB,OAAO,EAAEA,CAAA,KAAMH,UAAU,CAAC;QAAEC,WAAW,EAAE;MAAiC,CAAC,CAAE;MAAAC,QAAA,EAAC;IAAkB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAChHrB,KAAK,iBAAIL,OAAA,CAACF,aAAa;MAACO,KAAK,EAAEA,KAAM;MAACsB,IAAI,EAAEpB,QAAQ,GAAG,CAACA,QAAQ,CAAC,GAAG;IAAG;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxE,CAAC;AAEV,CAAC;AAACtB,EAAA,CA3BID,MAAM;AAAAyB,EAAA,GAANzB,MAAM;AA6BZ,eAAeA,MAAM;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
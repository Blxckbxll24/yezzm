{"ast":null,"code":"import hsl2rgb from './hsl2rgb';\nimport { invariant, isHSL, isNumber, isPlainObject, isRGB, messages } from './modules/utils';\nimport rgb2Hsl from './rgb2hsl';\nexport default function formatCSS(input, options = {}) {\n  invariant(isPlainObject(input) && (isRGB(input) || isHSL(input)), messages.invalid);\n  const {\n    alpha,\n    model = isRGB(input) ? 'rgb' : 'hsl'\n  } = options;\n  const prefix = `${model}${isNumber(alpha) ? 'a' : ''}`;\n  let color = input;\n  let params = [];\n  if (model === 'rgb') {\n    if (isHSL(color)) {\n      color = hsl2rgb(color);\n    }\n    params = [Math.round(color.r), Math.round(color.g), Math.round(color.b)];\n  } else {\n    if (isRGB(color)) {\n      color = rgb2Hsl(color);\n    }\n    params = [Math.round(color.h), `${Math.round(color.s)}%`, `${Math.round(color.l)}%`];\n  }\n  if (isNumber(alpha)) {\n    params.push(alpha);\n  }\n  return `${prefix}(${params.join(', ')})`;\n}","map":{"version":3,"names":["hsl2rgb","invariant","isHSL","isNumber","isPlainObject","isRGB","messages","rgb2Hsl","formatCSS","input","options","invalid","alpha","model","prefix","color","params","Math","round","r","g","b","h","s","l","push","join"],"sources":["C:\\Users\\adela\\Desktop\\nuevoyeezy\\spotifybarato\\node_modules\\colorizr\\src\\format-css.ts"],"sourcesContent":["import hsl2rgb from './hsl2rgb';\r\nimport { invariant, isHSL, isNumber, isPlainObject, isRGB, messages } from './modules/utils';\r\nimport rgb2Hsl from './rgb2hsl';\r\nimport { FormatOptions, HSL, RGB } from './types';\r\n\r\nexport default function formatCSS(input: HSL | RGB, options: FormatOptions = {}): string {\r\n  invariant(isPlainObject(input) && (isRGB(input) || isHSL(input)), messages.invalid);\r\n\r\n  const { alpha, model = isRGB(input) ? 'rgb' : 'hsl' } = options;\r\n  const prefix = `${model}${isNumber(alpha) ? 'a' : ''}`;\r\n  let color = input;\r\n  let params = [];\r\n\r\n  if (model === 'rgb') {\r\n    if (isHSL(color)) {\r\n      color = hsl2rgb(color);\r\n    }\r\n\r\n    params = [Math.round(color.r), Math.round(color.g), Math.round(color.b)];\r\n  } else {\r\n    if (isRGB(color)) {\r\n      color = rgb2Hsl(color);\r\n    }\r\n\r\n    params = [Math.round(color.h), `${Math.round(color.s)}%`, `${Math.round(color.l)}%`];\r\n  }\r\n\r\n  if (isNumber(alpha)) {\r\n    params.push(alpha);\r\n  }\r\n\r\n  return `${prefix}(${params.join(', ')})`;\r\n}\r\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,WAAW;AAC/B,SAASC,SAAS,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,iBAAiB;AAC5F,OAAOC,OAAO,MAAM,WAAW;AAG/B,eAAc,SAAUC,SAASA,CAACC,KAAgB,EAAEC,OAAA,GAAyB,EAAE;EAC7ET,SAAS,CAACG,aAAa,CAACK,KAAK,CAAC,KAAKJ,KAAK,CAACI,KAAK,CAAC,IAAIP,KAAK,CAACO,KAAK,CAAC,CAAC,EAAEH,QAAQ,CAACK,OAAO,CAAC;EAEnF,MAAM;IAAEC,KAAK;IAAEC,KAAK,GAAGR,KAAK,CAACI,KAAK,CAAC,GAAG,KAAK,GAAG;EAAK,CAAE,GAAGC,OAAO;EAC/D,MAAMI,MAAM,GAAG,GAAGD,KAAK,GAAGV,QAAQ,CAACS,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE;EACtD,IAAIG,KAAK,GAAGN,KAAK;EACjB,IAAIO,MAAM,GAAG,EAAE;EAEf,IAAIH,KAAK,KAAK,KAAK,EAAE;IACnB,IAAIX,KAAK,CAACa,KAAK,CAAC,EAAE;MAChBA,KAAK,GAAGf,OAAO,CAACe,KAAK,CAAC;;IAGxBC,MAAM,GAAG,CAACC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,CAAC,CAAC,EAAEF,IAAI,CAACC,KAAK,CAACH,KAAK,CAACK,CAAC,CAAC,EAAEH,IAAI,CAACC,KAAK,CAACH,KAAK,CAACM,CAAC,CAAC,CAAC;GACzE,MAAM;IACL,IAAIhB,KAAK,CAACU,KAAK,CAAC,EAAE;MAChBA,KAAK,GAAGR,OAAO,CAACQ,KAAK,CAAC;;IAGxBC,MAAM,GAAG,CAACC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACO,CAAC,CAAC,EAAE,GAAGL,IAAI,CAACC,KAAK,CAACH,KAAK,CAACQ,CAAC,CAAC,GAAG,EAAE,GAAGN,IAAI,CAACC,KAAK,CAACH,KAAK,CAACS,CAAC,CAAC,GAAG,CAAC;;EAGtF,IAAIrB,QAAQ,CAACS,KAAK,CAAC,EAAE;IACnBI,MAAM,CAACS,IAAI,CAACb,KAAK,CAAC;;EAGpB,OAAO,GAAGE,MAAM,IAAIE,MAAM,CAACU,IAAI,CAAC,IAAI,CAAC,GAAG;AAC1C"},"metadata":{},"sourceType":"module","externalDependencies":[]}